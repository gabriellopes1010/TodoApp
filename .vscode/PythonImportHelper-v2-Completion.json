[
    {
        "label": "routers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routers",
        "description": "routers",
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "description": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column(\"users\", sa.Column(\"phone_number\", sa.String(), nullable=True))\ndef downgrade() -> None:\n    op.drop_column(\"users\", \"phone_number\")",
        "detail": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "description": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column(\"users\", \"phone_number\")",
        "detail": "alembic.versions.bbac48381df6_create_phone_number_for_user_column",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nconfig.config_file_name\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = models.Base.metadata\n# other values from the config, defined by the needs of env.py,",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = models.Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "routers.admin",
        "description": "routers.admin",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):",
        "detail": "routers.admin",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.admin",
        "description": "routers.admin",
        "peekOfCode": "router = APIRouter(prefix=\"/admin\", tags=[\"Admin\"])\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)",
        "detail": "routers.admin",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "kind": 5,
        "importPath": "routers.admin",
        "description": "routers.admin",
        "peekOfCode": "db_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get(\"user_role\") != \"admin\":\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")\n    return db.query(Todos).all()\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(\n    user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)",
        "detail": "routers.admin",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "routers.admin",
        "description": "routers.admin",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get(\"user_role\") != \"admin\":\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")\n    return db.query(Todos).all()\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(\n    user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)\n):",
        "detail": "routers.admin",
        "documentation": {}
    },
    {
        "label": "CreateUserRequest",
        "kind": 6,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "class CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str\nclass Token(BaseModel):\n    access_token: str",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\ntemplates = Jinja2Templates(directory=\"TodoApp/templates\")\n## PAGES ##\n@router.get(\"/login-page\")",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "render_login_page",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def render_login_page(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request})\n@router.get(\"/register-page\")\ndef render_register_page(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n##ENDPOINTS\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "render_register_page",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def render_register_page(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n##ENDPOINTS\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user\ndef create_access_token(\n    username: str, user_id: int, role: str, expires_delta: timedelta\n):",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def create_access_token(\n    username: str, user_id: int, role: str, expires_delta: timedelta\n):\n    encode = {\"sub\": username, \"id\": user_id, \"role\": role}\n    expires = datetime.now(timezone.utc) + expires_delta\n    encode.update({\"exp\": expires})\n    return jwt.encode(encode, SECRETE_KEY, algorithm=ALGORITHM)\nasync def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRETE_KEY, algorithms=[ALGORITHM])",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\", tags=[\"Auth\"])\nSECRETE_KEY = \"55dac3308b599bec6b650ecf328828156fc64054e2fb5ba0ec81a74d5a33e698\"  # obter esse código -> openssl rand -hex 32\nALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "SECRETE_KEY",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "SECRETE_KEY = \"55dac3308b599bec6b650ecf328828156fc64054e2fb5ba0ec81a74d5a33e698\"  # obter esse código -> openssl rand -hex 32\nALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "ALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "bcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "oauth2_bearer",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "oauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str\nclass Token(BaseModel):",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "db_dependency = Annotated[Session, Depends(get_db)]\ntemplates = Jinja2Templates(directory=\"TodoApp/templates\")\n## PAGES ##\n@router.get(\"/login-page\")\ndef render_login_page(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request})\n@router.get(\"/register-page\")\ndef render_register_page(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n##ENDPOINTS",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "templates = Jinja2Templates(directory=\"TodoApp/templates\")\n## PAGES ##\n@router.get(\"/login-page\")\ndef render_login_page(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request})\n@router.get(\"/register-page\")\ndef render_register_page(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n##ENDPOINTS\ndef authenticate_user(username: str, password: str, db):",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "TodoRequest",
        "kind": 6,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "class TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\ndef redirect_to_login():\n    redirect_response = RedirectResponse(\n        url=\"/auth/login-page\", status_code=status.HTTP_302_FOUND\n    )\n    redirect_response.delete_cookie(key=\"access_token\")",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "redirect_to_login",
        "kind": 2,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "def redirect_to_login():\n    redirect_response = RedirectResponse(\n        url=\"/auth/login-page\", status_code=status.HTTP_302_FOUND\n    )\n    redirect_response.delete_cookie(key=\"access_token\")\n    return redirect_response\n## Pages ##\n@router.get(\"/todo-page\")\nasync def render_todo_page(request: Request, db: db_dependency):\n    try:",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "templates = Jinja2Templates(directory=\"TodoApp/templates\")\nrouter = APIRouter(prefix=\"/todos\", tags=[\"todos\"])\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "router = APIRouter(prefix=\"/todos\", tags=[\"todos\"])\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nclass TodoRequest(BaseModel):",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "kind": 5,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "db_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\ndef redirect_to_login():\n    redirect_response = RedirectResponse(\n        url=\"/auth/login-page\", status_code=status.HTTP_302_FOUND",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "routers.todos",
        "description": "routers.todos",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\ndef redirect_to_login():\n    redirect_response = RedirectResponse(\n        url=\"/auth/login-page\", status_code=status.HTTP_302_FOUND\n    )",
        "detail": "routers.todos",
        "documentation": {}
    },
    {
        "label": "UserVerification",
        "kind": 6,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "class UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")\n    return db.query(Users).filter(Users.id == user.get(\"id\")).first()\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_password(",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserVerification(BaseModel):",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "router = APIRouter(prefix=\"/user\", tags=[\"User\"])\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "kind": 5,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "db_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")\n    return db.query(Users).filter(Users.id == user.get(\"id\")).first()",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "kind": 5,
        "importPath": "routers.users",
        "description": "routers.users",
        "peekOfCode": "bcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail=\"Authentication Failed\")\n    return db.query(Users).filter(Users.id == user.get(\"id\")).first()\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)",
        "detail": "routers.users",
        "documentation": {}
    },
    {
        "label": "test_admin_real_all_authenticated",
        "kind": 2,
        "importPath": "test.test_admin",
        "description": "test.test_admin",
        "peekOfCode": "def test_admin_real_all_authenticated(test_todo):\n    response = client.get(\"/admin/todo\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"complete\": False,\n            \"title\": \"Learn to code!\",\n            \"description\": \"Need to learn everyday\",\n            \"id\": 1,\n            \"priority\": 5,",
        "detail": "test.test_admin",
        "documentation": {}
    },
    {
        "label": "test_admin_delete_todo",
        "kind": 2,
        "importPath": "test.test_admin",
        "description": "test.test_admin",
        "peekOfCode": "def test_admin_delete_todo(test_todo):\n    response = client.delete(\"/admin/todo/1\")\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\ndef test_delete_admin_not_found():\n    response = client.delete(\"/admin/todo/999\")\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Todo not found\"}",
        "detail": "test.test_admin",
        "documentation": {}
    },
    {
        "label": "test_delete_admin_not_found",
        "kind": 2,
        "importPath": "test.test_admin",
        "description": "test.test_admin",
        "peekOfCode": "def test_delete_admin_not_found():\n    response = client.delete(\"/admin/todo/999\")\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Todo not found\"}",
        "detail": "test.test_admin",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.test_admin",
        "description": "test.test_admin",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\ndef test_admin_real_all_authenticated(test_todo):\n    response = client.get(\"/admin/todo\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"complete\": False,\n            \"title\": \"Learn to code!\",\n            \"description\": \"Need to learn everyday\",",
        "detail": "test.test_admin",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_current_user]",
        "kind": 5,
        "importPath": "test.test_admin",
        "description": "test.test_admin",
        "peekOfCode": "app.dependency_overrides[get_current_user] = override_get_current_user\ndef test_admin_real_all_authenticated(test_todo):\n    response = client.get(\"/admin/todo\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"complete\": False,\n            \"title\": \"Learn to code!\",\n            \"description\": \"Need to learn everyday\",\n            \"id\": 1,",
        "detail": "test.test_admin",
        "documentation": {}
    },
    {
        "label": "test_authenticate_user",
        "kind": 2,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "def test_authenticate_user(test_user):\n    db = TestingSessionLocal()\n    authenticated_user = authenticate_user(test_user.username, \"testpassword\", db)\n    assert authenticated_user is not None\n    assert authenticated_user.username == test_user.username\n    non_existing_user = authenticate_user(\"WrongUserName\", \"testpassword\", db)\n    assert non_existing_user is False\n    wrong_password_user = authenticate_user(test_user.username, \"wrongpassword\", db)\n    assert wrong_password_user is False\ndef test_create_access_token():",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "test_create_access_token",
        "kind": 2,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "def test_create_access_token():\n    username = \"testuser\"\n    user_id = 1\n    role = \"user\"\n    expires_delta = timedelta(days=1)\n    token = create_access_token(username, user_id, role, expires_delta)\n    decoded_token = jwt.decode(\n        token, SECRETE_KEY, algorithms=[ALGORITHM], options={\"verify_signature\": False}\n    )\n    assert decoded_token[\"sub\"] == username",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\ndef test_authenticate_user(test_user):\n    db = TestingSessionLocal()\n    authenticated_user = authenticate_user(test_user.username, \"testpassword\", db)\n    assert authenticated_user is not None\n    assert authenticated_user.username == test_user.username\n    non_existing_user = authenticate_user(\"WrongUserName\", \"testpassword\", db)\n    assert non_existing_user is False\n    wrong_password_user = authenticate_user(test_user.username, \"wrongpassword\", db)\n    assert wrong_password_user is False",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "class Student:\n    def __init__(self, first_name: str, last_name: str, major: str, years: int):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.major = major\n        self.years = years\n@pytest.fixture\ndef default_employee():\n    return Student(\"John\", \"Doe\", \"Computer Science\", 3)\ndef test_person_initialization(default_employee):",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_equal_or_not_equal",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_equal_or_not_equal():\n    assert 3 == 3\n    assert 3 != 1\ndef test_is_instance():\n    assert isinstance(\"this is a string\", str)\n    assert not isinstance(\"10\", int)\ndef test_boolean():\n    validated = True\n    assert validated is True\n    assert (\"hello\" == \"world\") is False",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_is_instance",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_is_instance():\n    assert isinstance(\"this is a string\", str)\n    assert not isinstance(\"10\", int)\ndef test_boolean():\n    validated = True\n    assert validated is True\n    assert (\"hello\" == \"world\") is False\ndef test_type():\n    assert type(\"hello\" is str)\n    assert type(\"hello\" is not int)",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_boolean",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_boolean():\n    validated = True\n    assert validated is True\n    assert (\"hello\" == \"world\") is False\ndef test_type():\n    assert type(\"hello\" is str)\n    assert type(\"hello\" is not int)\ndef test_greater_and_less_than():\n    assert 7 > 3\n    assert 4 < 10",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_type",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_type():\n    assert type(\"hello\" is str)\n    assert type(\"hello\" is not int)\ndef test_greater_and_less_than():\n    assert 7 > 3\n    assert 4 < 10\ndef test_list():\n    num_list = [1, 2, 3, 4, 5]\n    any_list = [False, False]\n    assert 1 in num_list",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_greater_and_less_than",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_greater_and_less_than():\n    assert 7 > 3\n    assert 4 < 10\ndef test_list():\n    num_list = [1, 2, 3, 4, 5]\n    any_list = [False, False]\n    assert 1 in num_list\n    assert 7 not in num_list\n    assert all(num_list)\n    assert not any(any_list)",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_list():\n    num_list = [1, 2, 3, 4, 5]\n    any_list = [False, False]\n    assert 1 in num_list\n    assert 7 not in num_list\n    assert all(num_list)\n    assert not any(any_list)\nclass Student:\n    def __init__(self, first_name: str, last_name: str, major: str, years: int):\n        self.first_name = first_name",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "default_employee",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def default_employee():\n    return Student(\"John\", \"Doe\", \"Computer Science\", 3)\ndef test_person_initialization(default_employee):\n    assert default_employee.first_name == \"John\", \"First name should be John\"\n    assert default_employee.last_name == \"Doe\", \"Last name should be Doe\"\n    assert default_employee.major == \"Computer Science\"\n    assert default_employee.years == 3",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_person_initialization",
        "kind": 2,
        "importPath": "test.test_example",
        "description": "test.test_example",
        "peekOfCode": "def test_person_initialization(default_employee):\n    assert default_employee.first_name == \"John\", \"First name should be John\"\n    assert default_employee.last_name == \"Doe\", \"Last name should be Doe\"\n    assert default_employee.major == \"Computer Science\"\n    assert default_employee.years == 3",
        "detail": "test.test_example",
        "documentation": {}
    },
    {
        "label": "test_return_health_check",
        "kind": 2,
        "importPath": "test.test_main",
        "description": "test.test_main",
        "peekOfCode": "def test_return_health_check():\n    response = client.get(\"/healthy\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {\"status\": \"Healthy\"}",
        "detail": "test.test_main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.test_main",
        "description": "test.test_main",
        "peekOfCode": "client = TestClient(app)\ndef test_return_health_check():\n    response = client.get(\"/healthy\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {\"status\": \"Healthy\"}",
        "detail": "test.test_main",
        "documentation": {}
    },
    {
        "label": "test_read_all_authenticated",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_read_all_authenticated(test_todo):\n    response = client.get(\"/todos\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"description\": \"Need to learn everyday\",\n            \"complete\": False,\n            \"priority\": 5,\n            \"id\": 1,\n            \"title\": \"Learn to code!\",",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_read_all_one_authenticated",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_read_all_one_authenticated(test_todo):\n    response = client.get(\"todos/todo/1\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {\n        \"description\": \"Need to learn everyday\",\n        \"complete\": False,\n        \"priority\": 5,\n        \"id\": 1,\n        \"title\": \"Learn to code!\",\n        \"owner_id\": 1,",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_read_one_authenticated_not_found",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_read_one_authenticated_not_found():\n    response = client.get(\"todos/todo/999\")\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Todo not found.\"}\ndef test_create_todo(test_todo):\n    request_data = {\n        \"title\": \"New todo!\",\n        \"description\": \"New todo description\",\n        \"priority\": 5,\n        \"complete\": False,",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_create_todo",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_create_todo(test_todo):\n    request_data = {\n        \"title\": \"New todo!\",\n        \"description\": \"New todo description\",\n        \"priority\": 5,\n        \"complete\": False,\n    }\n    response = client.post(\"todos/todo/\", json=request_data)\n    assert response.status_code == 201\n    db = TestingSessionLocal()",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_update_todo",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_update_todo(test_todo):\n    request_data = {\n        \"title\": \"Change the title of the todo already saved!\",\n        \"description\": \"Need to learn everyday\",\n        \"priority\": 5,\n        \"complete\": False,\n    }\n    response = client.put(\"todos/todo/1\", json=request_data)\n    assert response.status_code == 204\n    db = TestingSessionLocal()",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_update_todo",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_update_todo(test_todo):\n    request_data = {\n        \"title\": \"Change the title of the todo already saved!\",\n        \"description\": \"Need to learn everyday\",\n        \"priority\": 5,\n        \"complete\": False,\n    }\n    response = client.put(\"todos/todo/999\", json=request_data)\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Todo not found.\"}",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_delete_todo",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_delete_todo(test_todo):\n    response = client.delete(\"todos/todo/1\")\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\ndef test_delete_todo_not_found():\n    response = client.delete(\"todos/todo/999\")\n    assert response.json() == {\"detail\": \"Todo not found\"}",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_delete_todo_not_found",
        "kind": 2,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "def test_delete_todo_not_found():\n    response = client.delete(\"todos/todo/999\")\n    assert response.json() == {\"detail\": \"Todo not found\"}",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\ndef test_read_all_authenticated(test_todo):\n    response = client.get(\"/todos\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"description\": \"Need to learn everyday\",\n            \"complete\": False,\n            \"priority\": 5,",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_current_user]",
        "kind": 5,
        "importPath": "test.test_todos",
        "description": "test.test_todos",
        "peekOfCode": "app.dependency_overrides[get_current_user] = override_get_current_user\ndef test_read_all_authenticated(test_todo):\n    response = client.get(\"/todos\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [\n        {\n            \"description\": \"Need to learn everyday\",\n            \"complete\": False,\n            \"priority\": 5,\n            \"id\": 1,",
        "detail": "test.test_todos",
        "documentation": {}
    },
    {
        "label": "test_return_user",
        "kind": 2,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "def test_return_user(test_user):\n    response = client.get(\"/user\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"username\"] == \"gabrielsiqueira\"\n    assert response.json()[\"email\"] == \"gabrielsiqueira@email.com\"\n    assert response.json()[\"first_name\"] == \"Gabriel\"\n    assert response.json()[\"last_name\"] == \"Siqueira\"\n    assert response.json()[\"role\"] == \"admin\"\n    assert response.json()[\"phone_number\"] == \"(111)-111-1111\"\ndef test_change_password_success(test_user):",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "test_change_password_success",
        "kind": 2,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "def test_change_password_success(test_user):\n    response = client.put(\n        \"/user/password\",\n        json={\"password\": \"testpassword\", \"new_password\": \"newpassword\"},\n    )\n    assert response.status_code == status.HTTP_204_NO_CONTENT\ndef test_change_password_invalid_current_password(test_user):\n    response = client.put(\n        \"/user/password\",\n        json={\"password\": \"wrong_password\", \"new_password\": \"newpassword\"},",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "test_change_password_invalid_current_password",
        "kind": 2,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "def test_change_password_invalid_current_password(test_user):\n    response = client.put(\n        \"/user/password\",\n        json={\"password\": \"wrong_password\", \"new_password\": \"newpassword\"},\n    )\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n    assert response.json() == {\"detail\": \"Error on password change\"}\ndef test_change_phone_number_succsess(test_user):\n    response = client.put(\"/user/phonenumber/222222222222\")\n    assert response.status_code == status.HTTP_204_NO_CONTENT",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "test_change_phone_number_succsess",
        "kind": 2,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "def test_change_phone_number_succsess(test_user):\n    response = client.put(\"/user/phonenumber/222222222222\")\n    assert response.status_code == status.HTTP_204_NO_CONTENT",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\ndef test_return_user(test_user):\n    response = client.get(\"/user\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"username\"] == \"gabrielsiqueira\"\n    assert response.json()[\"email\"] == \"gabrielsiqueira@email.com\"\n    assert response.json()[\"first_name\"] == \"Gabriel\"\n    assert response.json()[\"last_name\"] == \"Siqueira\"\n    assert response.json()[\"role\"] == \"admin\"",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_current_user]",
        "kind": 5,
        "importPath": "test.test_users",
        "description": "test.test_users",
        "peekOfCode": "app.dependency_overrides[get_current_user] = override_get_current_user\ndef test_return_user(test_user):\n    response = client.get(\"/user\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"username\"] == \"gabrielsiqueira\"\n    assert response.json()[\"email\"] == \"gabrielsiqueira@email.com\"\n    assert response.json()[\"first_name\"] == \"Gabriel\"\n    assert response.json()[\"last_name\"] == \"Siqueira\"\n    assert response.json()[\"role\"] == \"admin\"\n    assert response.json()[\"phone_number\"] == \"(111)-111-1111\"",
        "detail": "test.test_users",
        "documentation": {}
    },
    {
        "label": "override_get_db",
        "kind": 2,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "def override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef override_get_current_user():\n    return {\"username\": \"gabrielsiqueira\", \"id\": 1, \"user_role\": \"admin\"}\nclient = TestClient(app)\n@pytest.fixture",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "override_get_current_user",
        "kind": 2,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "def override_get_current_user():\n    return {\"username\": \"gabrielsiqueira\", \"id\": 1, \"user_role\": \"admin\"}\nclient = TestClient(app)\n@pytest.fixture\ndef test_user():\n    user = Users(\n        username=\"gabrielsiqueira\",\n        email=\"gabrielsiqueira@email.com\",\n        first_name=\"Gabriel\",\n        last_name=\"Siqueira\",",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "test_user",
        "kind": 2,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "def test_user():\n    user = Users(\n        username=\"gabrielsiqueira\",\n        email=\"gabrielsiqueira@email.com\",\n        first_name=\"Gabriel\",\n        last_name=\"Siqueira\",\n        hashed_password=bcrypt_context.hash(\"testpassword\"),\n        role=\"admin\",\n        phone_number=\"(111)-111-1111\",\n    )",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "test_todo",
        "kind": 2,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "def test_todo():\n    todo = Todos(\n        description=\"Need to learn everyday\",\n        complete=False,\n        priority=5,\n        title=\"Learn to code!\",\n        owner_id=1,\n    )\n    db = TestingSessionLocal()\n    db.add(todo)",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = (\n    \"postgresql://gabriellopes1010:teste1234@localhost/TodoApplicationDatabaseTest\"\n)\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase.metadata.create_all(bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase.metadata.create_all(bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef override_get_current_user():",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase.metadata.create_all(bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef override_get_current_user():\n    return {\"username\": \"gabrielsiqueira\", \"id\": 1, \"user_role\": \"admin\"}",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.utils",
        "description": "test.utils",
        "peekOfCode": "client = TestClient(app)\n@pytest.fixture\ndef test_user():\n    user = Users(\n        username=\"gabrielsiqueira\",\n        email=\"gabrielsiqueira@email.com\",\n        first_name=\"Gabriel\",\n        last_name=\"Siqueira\",\n        hashed_password=bcrypt_context.hash(\"testpassword\"),\n        role=\"admin\",",
        "detail": "test.utils",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = (\n    \"postgresql://gabriellopes1010:teste1234@localhost/TodoApplicationDatabase\"\n)\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test(request: Request):\n    return RedirectResponse(url=\"/todos/todo-page\", status_code=status.HTTP_302_FOUND)\n@app.get(\"/healthy\")\ndef health_check():\n    return {\"status\": \"Healthy\"}\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def health_check():\n    return {\"status\": \"Healthy\"}\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\nBase.metadata.create_all(bind=engine)\napp.mount(\"/static\", StaticFiles(directory=\"TodoApp/static\"), name=\"static\")\n@app.get(\"/\")\ndef test(request: Request):\n    return RedirectResponse(url=\"/todos/todo-page\", status_code=status.HTTP_302_FOUND)\n@app.get(\"/healthy\")\ndef health_check():\n    return {\"status\": \"Healthy\"}\napp.include_router(auth.router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Users(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True)\n    email = Column(String, unique=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    role = Column(String)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Todos",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Todos(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    priority = Column(Integer)\n    complete = Column(Boolean, default=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))",
        "detail": "models",
        "documentation": {}
    }
]